/*	сохраняем данный файл в кодировке UTF-8		*/

	author: Golinskiy Konstantin	e-mail: golinskiy.konstantin@gmail.com

//////////////////////////////////////////////////////////////////////////////////////////

// Напряжение: 3,3-5 В
// Диапазон измеряемого давления: 0-40 кПа
// Сопротивление: 4...6 кОм
// АЦП: 24 бит

// Датчик давления MPS20N0040D представляет собой мостовую схему, в которой одним из мостовых 
// элементов является чувствительный к давлению резистор. 
// Исходное напряжение подается на мост в точках 2 и 5, а выходной сигнал измеряется в точках 1 или 6 и 4.

//=========  setup =========================================================

// пин HX710B_OUT настраиваем как вход с подтяжкой к питанию input pin ( input pull_up )
// пин HX710B_SCK настраиваем как выход


// данные для расчета глубины погружения трубки в воду ( измерение уровня воды )
#define FLUID_DENSITY									(997.0)			// плотность жидкости -> вода( 997 кг/м3)
#define AIR_DENSITY 									(1.225)			// плотность воздуха( 1,225 кг/м3)
#define ACCELERATION_OF_GRAVITY 						(9.81)			// ускорения свободного падения ( g ≈ 9,81 м/с2 )

// кол-во замеров
#define READ_TIMES			20
//==========================================================================




#include "HX710B.h"



float data = 0;

// значение .gain = 3 и .scale = 1.0 остальные нужно подбирать для каждого датчика индивидуально ( смотри ниже как ето сделать )
HX710B_sensor sensor_one = {
	.dout.port = HX710B_OUT_GPIO_Port,			// input pin ( input pull_up )
	.dout.pin = HX710B_OUT_Pin,
	.sck.port = HX710B_SCK_GPIO_Port,				// output pin
	.sck.pin = HX710B_SCK_Pin,
	.gain = 3,
	.offset = -588000,											// offset - смещение с эталонным замером ( как получить смотри ниже )
	.scale = 1.0,														// used to return weight in grams, kg, ounces, whatever
	.coeff = 665.0													// поправочный коеффициент ( как получить смотри ниже )
};


//========  метод калибровки и получения коэффициента coeff и значения смещения offset  =============

// обязательно сперва нужно получить значение .offset и после него только .coeff

// получения значения .offset
// 1) устанавливаем значение .offset на 0
// 2) запускаем программу и смотри что вернет функция HX710B_read_average( &sensor_one, READ_TIMES );		// raw данные без учета offset ( реальные )
// 3) то что она вернет и будет значением .offset ( записываем сюда )

// получение значения .coeff
// 1) устанавливаем на датчик трубку прозрачную и отмеряем на ней растояние от конца ( например 1 см - 2 см - 3см )
// 2) заранее расчитываем значения для отметок которые оставили на трубке ( например 1 см - 2 см - 3см ) 
//		по формуле:
// 		P = (p2-p1)*g*h		// результат в паскалях Pa
//		для 1 см -> ( 997 - 1,225 ) * 9,81 * 0,01
// 		где p2 — плотность жидкости(кг/м3), p1 — плотность воздуха(кг/м3), h — высота жидкости в метрах (м), а g — ускорение свободного падения .
// 		плотности воды ( ρ2 = 997 кг/м3 ) и воздуха ( ρ1 = 1,225 кг/м3 ), а также ускорения свободного падения ( g ≈ 9,81 м/с2 ).
//		для примера при значениях ( например 1 см - 2 см - 3см ) получаем следущее:
//		для 1 см - 97,6855 Паскаль
//		для 2 см - 195,371 Паскаль
//		для 3 см - 293,056 Паскаль
// 3) далее погружаем трубку в воду ровно до уровня 1 см ( трубка должно быть прямой и находиться строго перпендикулярно уровню воды ( стоять ровно вниз )
//		запускаем программу и смотрим что вернет функция HX710B_get_value( &sensor_one, READ_TIMES );				// raw данные с учетом offset
//		записываем из ( например для 1 см вернула (80000) едениц, тоже самое делаем и для 2 см (125000) и для 3 см (205000)
// 4) далее берем и расчитываем полученные данные делим на расчетные значения:
//		для 1 см 80000 / 97,6855 Паскаль = 818
//		для 2 см 125000 / 195,371 Паскаль = 639
//		для 3 см 205000 / 293,056 Паскаль = 699
//		и т.д. чем больше замеров и больше между ними дистанция тем точнее получится 
//		из полученных результатов берем среднее ( или уже методом подбора подгоняем ) и записываем в .coeff
//====================================================================================================


//////////////////////////////////////////////////////////////////////////////////////////
	.........
	.........

main()=============================================================================================================================

	.........
	.........
	.........
	
	//////////////////////////////////////////////////////////////////////////////////////////
	
	// пробуждаем датчик 
	// ( если нужно экономить питание то можно пробуждать делать замер потом уводить его в спячку )
	HX710B_power_up( &sensor_one );
	
	//////////////////////////////////////////////////////////////////////////////////////////
	
while(1)===========================================================================================================================

		//////////////////////////////////////////////////////////////////////////////////////////
		
		// проверяем готов ли датчик
		if ( HX710B_is_ready( &sensor_one ) == HX710B_READY ) {
			
				//data = HX710B_pascal( &sensor_one );		// возвращает в паскалях
				//data = HX710B_atm( &sensor_one );				// возвращает в атмосферах
				//data = HX710B_mmHg( &sensor_one );			// возвращает в миллиметрах ртутного столба
				//data = HX710B_psi( &sensor_one );				// возвращает в фунтах на квадратный дюйм.
				//data = HX710B_bar( &sensor_one );				// возвращает в барах
			
			
				//data = HX710B_read_average( &sensor_one, READ_TIMES );		// raw данные без учета offset ( реальные )
				//data = HX710B_get_value( &sensor_one, READ_TIMES );				// raw данные с учетом offset
			
				// возвращает кол-во миллиметров трубки погружонной вертикально в жидкость (можно замерять уровень жидкости)
				data = HX710B_get_millimeters( &sensor_one );									
		}
		 
		HAL_Delay (500);
		
		//////////////////////////////////////////////////////////////////////////////////////////
		
	.........
	.........
	.........
	.........

=== end while(1) ==================================================================================================================
=== end main() ====================================================================================================================
